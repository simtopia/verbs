use crate::contract::Call;
use crate::network::Network;
use ethers_core::types::Address;
use fastrand::Rng;
use revm::primitives::Address as RevmAddress;

/// Admin agent type called at that start of each simulation step.
pub trait AdminAgent {
    /// Update the state of the agent, and network in place.
    ///
    /// # Arguments
    ///
    /// * `rng` - Fastrand rng state
    /// * `network` - Protocol deployment(s)
    ///
    fn update(&mut self, rng: &mut Rng, network: &mut Network);
}

/// Agent trait used to update all agents each model update.
pub trait Agent {
    /// Update the agent and optionally return a call to the EVM
    /// this should not update the state of the evm directly.
    ///
    /// # Arguments
    ///
    /// * `rng` - Fastrand rng state
    /// * `network` - Protocol deployment(s)
    ///
    fn update(&mut self, rng: &mut Rng, network: &mut Network) -> Vec<Call>;
    /// Get the revm address of the agent.
    fn get_call_address(&self) -> RevmAddress;
    /// Get the ethers-core address of the agent.
    fn get_address(&self) -> Address;
}

/// Trait used to record the state of the agent over the course of the simulation
pub trait RecordedAgent<R> {
    /// Get a record of the current state of the agent. Records are
    /// collected as a vector of vectors representing the state of a
    /// collection of agents over the history of the simulation.
    fn record(&mut self) -> R;
}

/// A collection of homogenous agents
pub trait AgentSet {
    /// Update all the agents in the set, collecting any EVM calls generated by the agents
    ///
    /// # Arguments
    ///
    /// * `rng` - Fastrand rng state
    /// * `network` - Protocol deployment(s)
    ///
    fn call_agents(&mut self, rng: &mut fastrand::Rng, network: &mut Network) -> Vec<Call>;
    /// Record the state of all the agents
    fn record_agents(&mut self);
    /// Get a vector of agent revm addresses contained in this set
    fn get_call_addresses(&self) -> Vec<RevmAddress>;
    /// Get a vector of agent ethers-core addresses contained in this set
    fn get_addresses(&self) -> Vec<Address>;
}
